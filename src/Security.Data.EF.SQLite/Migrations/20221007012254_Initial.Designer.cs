// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Security.Data.EF;

#nullable disable

namespace Security.Data.EF.SQLite.Migrations
{
    [DbContext(typeof(SSODbContext))]
    [Migration("20221007012254_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("Security.Objects.Entities.Session", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("AbsoluteExpiration")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("ExpiresAtTime")
                        .HasColumnType("TEXT");

                    b.Property<long>("SlidingExpirationInSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Security.Objects.Entities.SSORole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Privs")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("UsersArePortalAdmins")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Security.Objects.Entities.SSOUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Security.Objects.Entities.SSOUserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Security.Objects.Entities.Tenant", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tenants", (string)null);
                });

            modelBuilder.Entity("Security.Objects.Entities.TenantAnalysis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("TenantAnalysis", (string)null);
                });

            modelBuilder.Entity("Security.Objects.Entities.Token", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("Expires")
                        .HasColumnType("TEXT");

                    b.Property<int>("Reason")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserName");

                    b.ToTable("Tokens", (string)null);
                });

            modelBuilder.Entity("Security.Objects.Entities.UserEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventName")
                        .HasColumnType("TEXT");

                    b.Property<string>("SessionId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TenantId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SessionId");

                    b.HasIndex("TenantId");

                    b.ToTable("UserEvents", (string)null);
                });

            modelBuilder.Entity("Security.Objects.Entities.SSORole", b =>
                {
                    b.HasOne("Security.Objects.Entities.Tenant", "Tenant")
                        .WithMany("Roles")
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Security.Objects.Entities.SSOUserRole", b =>
                {
                    b.HasOne("Security.Objects.Entities.SSORole", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Security.Objects.Entities.SSOUser", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Security.Objects.Entities.TenantAnalysis", b =>
                {
                    b.HasOne("Security.Objects.Entities.Tenant", "Tenant")
                        .WithMany("Analysis")
                        .HasForeignKey("TenantId");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Security.Objects.Entities.Token", b =>
                {
                    b.HasOne("Security.Objects.Entities.SSOUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserName");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Security.Objects.Entities.UserEvent", b =>
                {
                    b.HasOne("Security.Objects.Entities.SSOUser", "CreatedByUser")
                        .WithMany("UserEvents")
                        .HasForeignKey("CreatedBy");

                    b.HasOne("Security.Objects.Entities.Session", "Session")
                        .WithMany("UserEvents")
                        .HasForeignKey("SessionId");

                    b.HasOne("Security.Objects.Entities.Tenant", "Tenant")
                        .WithMany("UserEvents")
                        .HasForeignKey("TenantId");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Session");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("Security.Objects.Entities.Session", b =>
                {
                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("Security.Objects.Entities.SSORole", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Security.Objects.Entities.SSOUser", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Tokens");

                    b.Navigation("UserEvents");
                });

            modelBuilder.Entity("Security.Objects.Entities.Tenant", b =>
                {
                    b.Navigation("Analysis");

                    b.Navigation("Roles");

                    b.Navigation("UserEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
